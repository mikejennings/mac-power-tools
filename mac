#!/bin/bash

# Mac CLI - Main wrapper script
# Replacement for mac-cli with custom functionality

# Get the directory where this script is located
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
NC='\033[0m' # No Color

# Version
VERSION="1.1.0"

# Function to show help
show_help() {
    printf "${BLUE}Mac CLI v${VERSION}${NC}\n"
    printf "A comprehensive macOS management tool\n\n"
    
    printf "${YELLOW}USAGE:${NC}\n"
    printf "    mac <command> [options]\n\n"
    
    printf "${YELLOW}COMMANDS:${NC}\n"
    printf "    ${CYAN}System Updates:${NC}\n"
    printf "        update [target]     Update system, packages, and apps\n"
    printf "                           Targets: macos, brew, mas, npm, ruby, pip\n"
    printf "                           No target updates everything\n\n"
    
    printf "    ${CYAN}System Information:${NC}\n"
    printf "        info [type]        Show system information\n"
    printf "                          Types: system, memory, disk, network, battery, temp, cpu\n"
    printf "                          No type shows all information\n\n"
    
    printf "    ${CYAN}Maintenance:${NC}\n"
    printf "        maintenance        Interactive maintenance menu\n"
    printf "        clean [options]   Deep clean system junk\n"
    printf "        trash             Empty trash\n"
    printf "        cache             Clear caches\n"
    printf "        downloads         Clean/organize downloads folder\n"
    printf "        duplicates [path] Find duplicate files\n"
    printf "        large-files       Find large files (>100MB)\n"
    printf "        large-dirs        Find large directories\n"
    printf "        logs              Clean old log files\n"
    printf "        dns               Flush DNS cache\n"
    printf "        spotlight         Rebuild Spotlight index\n"
    printf "        hidden            Toggle hidden files visibility\n"
    printf "        permissions       Repair disk permissions\n\n"
    
    printf "    ${CYAN}Performance:${NC}\n"
    printf "        memory [options]  Monitor and optimize memory\n\n"
    
    printf "    ${CYAN}Power Management:${NC}\n"
    printf "        sleep             Put Mac to sleep\n"
    printf "        restart           Restart Mac\n"
    printf "        shutdown          Shutdown Mac\n"
    printf "        kill-apps         Close all applications\n\n"
    
    printf "    ${CYAN}Downloads Management:${NC}\n"
    printf "        sort-downloads    Sort downloads by date and type\n"
    printf "        watch-downloads   Monitor downloads folder activity\n"
    printf "        downloads-status  Show downloads organization status\n\n"
    
    printf "    ${CYAN}Backup:${NC}\n"
    printf "        backup            Run Mackup backup\n\n"
    
    printf "    ${CYAN}Application Management:${NC}\n"
    printf "        uninstall <app>   Completely uninstall an application\n"
    printf "        uninstall --list  List all installed applications\n\n"
    
    printf "    ${CYAN}Other:${NC}\n"
    printf "        help              Show this help message\n"
    printf "        version           Show version information\n\n"
    
    printf "${YELLOW}EXAMPLES:${NC}\n"
    printf "    mac update                # Update everything\n"
    printf "    mac update brew           # Update only Homebrew\n"
    printf "    mac info                  # Show all system information\n"
    printf "    mac info memory           # Show only memory information\n"
    printf "    mac maintenance           # Open maintenance menu\n"
    printf "    mac trash                 # Empty trash\n"
    printf "    mac sort-downloads        # Organize downloads folder\n\n"
    
    printf "${YELLOW}PROJECT:${NC}\n"
    printf "    Location: $SCRIPT_DIR\n"
    printf "    Config: $SCRIPT_DIR/CLAUDE.md\n"
    printf "    Logs: ~/Library/Logs/\n\n"
}

# Function to show version
show_version() {
    echo "Mac CLI v${VERSION}"
    echo "Location: $SCRIPT_DIR"
    echo "macOS: $(sw_vers -productVersion)"
}

# Main command router
main() {
    if [ $# -eq 0 ]; then
        show_help
        exit 0
    fi
    
    case $1 in
        # Help and version
        help|-h|--help)
            show_help
            ;;
        version|-v|--version)
            show_version
            ;;
            
        # System updates
        update)
            shift
            "$SCRIPT_DIR/scripts/mac-update.sh" "$@"
            ;;
            
        # System information
        info|system)
            shift
            "$SCRIPT_DIR/scripts/mac-info.sh" "$@"
            ;;
            
        # Maintenance commands
        maintenance)
            "$SCRIPT_DIR/scripts/mac-maintenance.sh"
            ;;
        clean)
            shift
            "$SCRIPT_DIR/scripts/mac-clean.sh" "$@"
            ;;
        trash)
            "$SCRIPT_DIR/scripts/mac-maintenance.sh" trash
            ;;
        cache|caches)
            "$SCRIPT_DIR/scripts/mac-maintenance.sh" cache
            ;;
        downloads)
            "$SCRIPT_DIR/scripts/mac-maintenance.sh" downloads
            ;;
        duplicates)
            shift
            "$SCRIPT_DIR/scripts/mac-duplicates.sh" "$@"
            ;;
        large-files)
            "$SCRIPT_DIR/scripts/mac-maintenance.sh" large-files
            ;;
        large-dirs|large-directories)
            "$SCRIPT_DIR/scripts/mac-maintenance.sh" large-dirs
            ;;
        logs)
            "$SCRIPT_DIR/scripts/mac-maintenance.sh" logs
            ;;
        dns)
            "$SCRIPT_DIR/scripts/mac-maintenance.sh" dns
            ;;
        spotlight)
            "$SCRIPT_DIR/scripts/mac-maintenance.sh" spotlight
            ;;
        hidden)
            "$SCRIPT_DIR/scripts/mac-maintenance.sh" hidden
            ;;
        permissions)
            "$SCRIPT_DIR/scripts/mac-maintenance.sh" permissions
            ;;
            
        # Performance
        memory)
            shift
            "$SCRIPT_DIR/scripts/mac-memory.sh" "$@"
            ;;
            
        # Power management
        sleep)
            "$SCRIPT_DIR/scripts/mac-maintenance.sh" sleep
            ;;
        restart)
            "$SCRIPT_DIR/scripts/mac-maintenance.sh" restart
            ;;
        shutdown)
            "$SCRIPT_DIR/scripts/mac-maintenance.sh" shutdown
            ;;
        kill-apps)
            "$SCRIPT_DIR/scripts/mac-maintenance.sh" kill-apps
            ;;
            
        # Downloads management
        sort-downloads)
            "$SCRIPT_DIR/scripts/sort-downloads.sh"
            ;;
        watch-downloads)
            "$SCRIPT_DIR/scripts/watch-downloads.sh"
            ;;
        downloads-status)
            "$SCRIPT_DIR/scripts/downloads-status.sh"
            ;;
            
        # Backup
        backup)
            if [ -f "$SCRIPT_DIR/mackup-backup.sh" ]; then
                "$SCRIPT_DIR/mackup-backup.sh"
            else
                printf "${RED}Mackup backup script not found${NC}\n"
                exit 1
            fi
            ;;
            
        # Application management
        uninstall)
            shift
            "$SCRIPT_DIR/scripts/mac-uninstall.sh" "$@"
            ;;
            
        # Unknown command
        *)
            printf "${RED}Unknown command: $1${NC}\n"
            echo "Run 'mac help' for usage information"
            exit 1
            ;;
    esac
}

# Check if scripts directory exists
if [ ! -d "$SCRIPT_DIR/scripts" ]; then
    printf "${RED}Error: scripts directory not found${NC}\n"
    echo "Expected location: $SCRIPT_DIR/scripts"
    exit 1
fi

# Run main function with all arguments
main "$@"