#!/bin/bash

# Mac Power Tools - Unified Architecture
# Combines legacy compatibility with modern plugin system

# Get the directory where this script is located
# Store the original location before any sourcing
ORIGINAL_SCRIPT_PATH="${BASH_SOURCE[0]}"
MAC_HOME_DIR="$( cd "$( dirname "$ORIGINAL_SCRIPT_PATH" )" && pwd )"
export MAC_POWER_TOOLS_HOME="$MAC_HOME_DIR"
# Keep SCRIPT_DIR for compatibility but protect it
SCRIPT_DIR="$MAC_HOME_DIR"

# Version - incrementing to 3.0.0 for unified architecture
VERSION="4.0.3"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
NC='\033[0m' # No Color

# Operation mode: plugin-first or legacy-first
# Can be configured via environment variable or config file
OPERATION_MODE="${MAC_OPERATION_MODE:-plugin-first}"

# Source the plugin system if available
if [ -f "${MAC_POWER_TOOLS_HOME}/lib/plugin-loader.sh" ]; then
    source "${MAC_POWER_TOOLS_HOME}/lib/plugin-loader.sh"
    source "${MAC_POWER_TOOLS_HOME}/lib/plugin-manager.sh"
    PLUGIN_SYSTEM_AVAILABLE=true
    
    # Initialize plugin system
    init_plugin_dirs
    # Lazy loading: plugins are loaded on-demand, not at startup
    # This improves startup time by ~60% (from 900ms to <400ms)
    # build_command_cache is called only when needed by execute_plugin_command
else
    PLUGIN_SYSTEM_AVAILABLE=false
fi

# Function to show version
show_version() {
    printf "${BLUE}Mac Power Tools v${VERSION}${NC}\n"
    echo "Location: $MAC_HOME_DIR"
    echo "macOS: $(sw_vers -productVersion)"
    echo "Architecture: Unified (Plugin + Legacy)"
    echo "Operation Mode: $OPERATION_MODE"
    
    if [ "$PLUGIN_SYSTEM_AVAILABLE" = true ]; then
        # Count plugins
        local enabled_count=0
        local available_count=0
        
        for plugin in "$AVAILABLE_DIR"/*; do
            if [ -d "$plugin" ]; then
                ((available_count++))
                local plugin_name=$(basename "$plugin")
                is_plugin_enabled "$plugin_name" && ((enabled_count++))
            fi
        done
        
        printf "Plugins: %d enabled, %d available\n" "$enabled_count" "$available_count"
    else
        echo "Plugin System: Not available (legacy mode only)"
    fi
}

# Function to show help
show_help() {
    printf "${BLUE}Mac Power Tools v${VERSION}${NC}\n"
    printf "A comprehensive macOS management tool\n\n"
    
    printf "${YELLOW}USAGE:${NC}\n"
    printf "    mac <command> [options]\n\n"
    
    # If plugin system is available and we have plugins, show them first
    if [ "$PLUGIN_SYSTEM_AVAILABLE" = true ] && [ "$OPERATION_MODE" = "plugin-first" ]; then
        printf "${YELLOW}PLUGIN COMMANDS:${NC}\n"
        local commands=($(get_plugin_commands 2>/dev/null))
        if [ ${#commands[@]} -gt 0 ]; then
            for cmd in "${commands[@]}"; do
                # Get description from plugin metadata
                local plugin_path="${AVAILABLE_DIR}/${cmd}"
                if [ -d "$plugin_path" ]; then
                    local desc=$(grep '"description"' "${plugin_path}/plugin.json" 2>/dev/null | cut -d'"' -f4)
                    printf "    %-18s%s\n" "$cmd" "${desc:-No description available}"
                fi
            done
            printf "\n"
        fi
        
        printf "${YELLOW}PLUGIN MANAGEMENT:${NC}\n"
        printf "    plugin list       List all plugins\n"
        printf "    plugin enable     Enable a plugin\n"
        printf "    plugin disable    Disable a plugin\n"
        printf "    plugin install    Install a plugin\n"
        printf "    plugin remove     Remove a plugin\n\n"
    fi
    
    # Show legacy commands (always available as fallback)
    printf "${YELLOW}SYSTEM COMMANDS:${NC}\n"
    printf "    ${CYAN}System Updates:${NC}\n"
    printf "        update [target]     Update system, packages, and apps\n"
    printf "                           Targets: macos, brew, mas, npm, ruby, pip\n\n"
    
    printf "    ${CYAN}System Information:${NC}\n"
    printf "        info [type]        Show system information\n"
    printf "                          Types: system, memory, disk, network, battery, temp, cpu\n\n"
    
    printf "    ${CYAN}Maintenance:${NC}\n"
    printf "        maintenance        Interactive maintenance menu\n"
    printf "        clean [options]   Deep clean system junk\n"
    printf "        trash             Empty trash\n"
    printf "        cache             Clear caches\n"
    printf "        duplicates [path] Find duplicate files\n"
    printf "        memory [options]  Monitor and optimize memory\n\n"
    
    printf "    ${CYAN}Power Management:${NC}\n"
    printf "        awake [options]   Keep Mac awake\n"
    printf "        sleep             Put Mac to sleep\n"
        printf "        restart           Restart Mac\n"
        printf "        shutdown          Shutdown Mac\n"
        printf "        shortcuts         Quick system shortcuts\n\n"
    
    printf "    ${CYAN}Application Management:${NC}\n"
    printf "        uninstall <app>   Completely uninstall an application\n"
    printf "        migrate-mas       Migrate Mac App Store apps to Homebrew\n"
    printf "        migrate-apps      Migrate manually downloaded apps to Homebrew\n\n"
    
    printf "    ${CYAN}Other:${NC}\n"
    printf "        menu              Interactive command selection with fzf\n"
    printf "        help              Show this help message\n"
    printf "        version           Show version information\n"
    printf "        commands          List all available commands\n\n"
    
    printf "${YELLOW}EXAMPLES:${NC}\n"
    printf "    mac menu                  # Interactive command selection\n"
    printf "    mac update                # Update everything\n"
    printf "    mac plugin list          # See available plugins\n"
    printf "    mac battery status       # Use battery plugin (if enabled)\n\n"
}

# List all available commands
list_commands() {
    printf "${BLUE}Available Commands:${NC}\n\n"
    
    if [ "$PLUGIN_SYSTEM_AVAILABLE" = true ]; then
        printf "${CYAN}Plugin Commands:${NC}\n"
        local commands=($(get_plugin_commands 2>/dev/null))
        if [ ${#commands[@]} -gt 0 ]; then
            printf "  "
            printf "%s, " "${commands[@]}" | sed 's/, $/\n/'
        else
            printf "  No plugins enabled\n"
        fi
        printf "\n"
    fi
    
    printf "${CYAN}Core Commands:${NC}\n"
    printf "  help, version, commands, plugin, menu\n\n"
    
    printf "${CYAN}Legacy Commands (always available):${NC}\n"
    printf "  update, info, maintenance, clean, trash, cache, duplicates\n"
    printf "  memory, battery, awake, sleep, restart, shutdown, shortcuts\n"
    printf "  uninstall, migrate-mas, migrate-apps, downloads, dotfiles\n"
    printf "  linuxify, privacy, security\n"
}

# Try to execute command as plugin
try_plugin_command() {
    local command=$1
    shift
    
    if [ "$PLUGIN_SYSTEM_AVAILABLE" = true ]; then
        if execute_plugin_command "$command" "$@" 2>/dev/null; then
            return 0
        fi
    fi
    return 1
}

# Execute legacy command
execute_legacy_command() {
    local command=$1
    shift
    
    case $command in
        # System updates - handled by plugin system
        # update command is now handled by the update plugin
            
        # System information - handled by plugin system
        # info command is now handled by the info plugin
            
        # Maintenance commands
        maintenance)
            "$MAC_HOME_DIR/scripts/mac-maintenance.sh"
            ;;
        clean)
            "$MAC_HOME_DIR/scripts/mac-clean.sh" "$@"
            ;;
        trash)
            "$MAC_HOME_DIR/scripts/mac-maintenance.sh" trash
            ;;
        cache|caches)
            "$MAC_HOME_DIR/scripts/mac-maintenance.sh" cache
            ;;
        duplicates)
            if [[ $# -eq 0 ]] && command -v fzf &> /dev/null; then
                "$MAC_HOME_DIR/scripts/mac-fzf.sh" duplicates
            else
                "$MAC_HOME_DIR/scripts/mac-duplicates.sh" "$@"
            fi
            ;;
            
        # Performance
        memory)
            "$MAC_HOME_DIR/scripts/mac-memory.sh" "$@"
            ;;
        battery)
            "$MAC_HOME_DIR/scripts/mac-battery.sh" "$@"
            ;;
            
        # Power management
        awake)
            "$MAC_HOME_DIR/scripts/mac-awake.sh" "$@"
            ;;
        sleep)
            "$MAC_HOME_DIR/scripts/mac-maintenance.sh" sleep
            ;;
        restart)
            "$MAC_HOME_DIR/scripts/mac-maintenance.sh" restart
            ;;
        shutdown)
            "$MAC_HOME_DIR/scripts/mac-maintenance.sh" shutdown
            ;;
        shortcuts)
            "$MAC_HOME_DIR/scripts/mac-shortcuts.sh" "$@"
            ;;
            
        # Application management
        uninstall)
            if [[ $# -eq 0 ]] && command -v fzf &> /dev/null; then
                "$MAC_HOME_DIR/scripts/mac-fzf.sh" uninstall
            else
                "$MAC_HOME_DIR/scripts/mac-uninstall.sh" "$@"
            fi
            ;;
        migrate-mas|mas-migrate)
            if ! try_plugin_command "migrate-mas" "$@"; then
                echo "Error: migrate-mas plugin not available"
                exit 1
            fi
            ;;
        migrate-apps|apps-migrate)
            if ! try_plugin_command "migrate-apps" "$@"; then
                echo "Error: migrate-apps plugin not available"
                exit 1
            fi
            ;;
            
        # Downloads management
        downloads)
            if [[ $# -eq 0 ]] && command -v fzf &> /dev/null; then
                "$MAC_HOME_DIR/scripts/mac-fzf.sh" downloads
            else
                "$MAC_HOME_DIR/scripts/mac-downloads.sh" "$@"
            fi
            ;;
            
        # Dotfiles
        dotfiles)
            if [[ $# -eq 0 ]] && command -v fzf &> /dev/null; then
                "$MAC_HOME_DIR/scripts/mac-fzf.sh" dotfiles
            else
                "$MAC_HOME_DIR/scripts/mac-dotfiles.sh" "$@"
            fi
            ;;
            
        # GNU/Linux environment
        linuxify)
            "$MAC_HOME_DIR/scripts/mac-linuxify.sh" "$@"
            ;;
            
        # Privacy & Security
        privacy)
            if [[ $# -eq 0 ]] && command -v fzf &> /dev/null; then
                "$MAC_HOME_DIR/scripts/mac-fzf.sh" privacy
            else
                "$MAC_HOME_DIR/scripts/mac-privacy.sh" "$@"
            fi
            ;;
        security)
            case "${1:-audit}" in
                audit)
                    "$MAC_HOME_DIR/scripts/mac-privacy.sh" audit
                    ;;
                scan)
                    shift
                    "$MAC_HOME_DIR/scripts/mac-privacy.sh" scan "$@"
                    ;;
                protect)
                    "$MAC_HOME_DIR/scripts/mac-privacy.sh" protect
                    ;;
                *)
                    "$MAC_HOME_DIR/scripts/mac-privacy.sh" audit
                    ;;
            esac
            ;;
            
        # Interactive menu
        menu|fzf)
            if command -v fzf &> /dev/null; then
                "$MAC_HOME_DIR/scripts/mac-fzf.sh" menu
            else
                printf "${YELLOW}fzf not found. Install with: brew install fzf${NC}\n"
                echo "Or use 'mac help' for command reference"
            fi
            ;;
            
        *)
            return 1
            ;;
    esac
    return 0
}

# Main command router
main() {
    if [ $# -eq 0 ]; then
        show_help
        exit 0
    fi
    
    local command=$1
    shift
    
    case "$command" in
        # Core commands
        help|--help|-h)
            show_help
            ;;
            
        version|--version|-v)
            show_version
            ;;
            
        commands)
            list_commands
            ;;
            
        # Plugin management (if available)
        plugin|plugins)
            if [ "$PLUGIN_SYSTEM_AVAILABLE" = true ]; then
                plugin_manager_main "$@"
            else
                printf "${RED}Plugin system not available${NC}\n"
                echo "The plugin system files are missing from lib/"
                exit 1
            fi
            ;;
            
        *)
            # Based on operation mode, try plugin or legacy first
            local executed=false
            
            if [ "$OPERATION_MODE" = "plugin-first" ]; then
                # Try plugin first, fall back to legacy
                if try_plugin_command "$command" "$@"; then
                    executed=true
                elif execute_legacy_command "$command" "$@"; then
                    executed=true
                fi
            else
                # Try legacy first, fall back to plugin
                if execute_legacy_command "$command" "$@"; then
                    executed=true
                elif try_plugin_command "$command" "$@"; then
                    executed=true
                fi
            fi
            
            if [ "$executed" = false ]; then
                printf "${RED}Unknown command: $command${NC}\n"
                echo "Run 'mac help' for usage information"
                exit 1
            fi
            ;;
    esac
}

# Scripts directory no longer needed in v4.0.0+ (pure plugin system)
# All functionality now provided through native plugins

# Run main function with all arguments
main "$@"