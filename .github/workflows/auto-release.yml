name: Auto Release

on:
  push:
    branches:
      - master
    paths:
      - 'mac'
      - 'scripts/**'
      - 'README.md'

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.check.outputs.should_release }}
      version: ${{ steps.check.outputs.version }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Check if version changed
      id: check
      run: |
        # Get current version from mac script
        CURRENT_VERSION=$(grep '^VERSION=' mac | cut -d'"' -f2)
        echo "Current version: $CURRENT_VERSION"
        
        # Check if tag already exists
        if git rev-parse "v$CURRENT_VERSION" >/dev/null 2>&1; then
          echo "Tag v$CURRENT_VERSION already exists"
          echo "should_release=false" >> $GITHUB_OUTPUT
        else
          echo "Tag v$CURRENT_VERSION does not exist, will create release"
          echo "should_release=true" >> $GITHUB_OUTPUT
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        fi

  auto-release:
    needs: check-version
    if: needs.check-version.outputs.should_release == 'true'
    runs-on: macos-14
    
    permissions:
      contents: write
      issues: write
      
    steps:
    - uses: actions/checkout@v4
    
    - name: Set version
      id: version
      run: |
        VERSION="${{ needs.check-version.outputs.version }}"
        echo "version=v$VERSION" >> $GITHUB_OUTPUT
        echo "version_number=$VERSION" >> $GITHUB_OUTPUT
    
    - name: Extract changelog
      id: changelog
      run: |
        # Try to extract recent changes from README.md
        VERSION="${{ steps.version.outputs.version }}"
        VERSION_NUM="${{ steps.version.outputs.version_number }}"
        
        # Check if version exists in README
        if grep -q "### v${VERSION_NUM}" README.md; then
          echo "Found changelog for v${VERSION_NUM}"
          # Extract the changelog section
          sed -n "/### v${VERSION_NUM}/,/### v[0-9]/p" README.md | sed '$ d' > changelog_content.md
          
          # Create full release notes
          {
            echo "## Mac Power Tools ${VERSION}"
            echo ""
            cat changelog_content.md
            echo ""
            echo "### Installation"
            echo ""
            echo "#### Via Homebrew (Recommended)"
            echo '```bash'
            echo "brew update"
            echo "brew upgrade mac-power-tools"
            echo '```'
            echo ""
            echo "#### Manual Installation"
            echo '```bash'
            echo "curl -LO https://github.com/mikejennings/mac-power-tools/releases/download/${VERSION}/mac-power-tools-${VERSION}.tar.gz"
            echo "tar -xzf mac-power-tools-${VERSION}.tar.gz"
            echo "./install.sh"
            echo '```'
          } > release_notes.md
        else
          echo "No changelog found for v${VERSION_NUM}, using default"
          # Create default release notes
          {
            echo "## Mac Power Tools ${VERSION}"
            echo ""
            echo "### What's Changed"
            echo "- Various improvements and bug fixes"
            echo ""
            echo "### Installation"
            echo ""
            echo "#### Via Homebrew (Recommended)"
            echo '```bash'
            echo "brew tap mikejennings/mac-power-tools"
            echo "brew install mac-power-tools"
            echo '```'
            echo ""
            echo "#### Manual Installation"
            echo '```bash'
            echo "curl -LO https://github.com/mikejennings/mac-power-tools/releases/download/${VERSION}/mac-power-tools-${VERSION}.tar.gz"
            echo "tar -xzf mac-power-tools-${VERSION}.tar.gz"
            echo "./install.sh"
            echo '```'
          } > release_notes.md
        fi
    
    - name: Create release archive
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        mkdir -p dist
        
        # Create tarball
        tar -czf "dist/mac-power-tools-${VERSION}.tar.gz" \
          --exclude='.git*' \
          --exclude='dist' \
          --exclude='.github' \
          --exclude='*.swp' \
          --exclude='.DS_Store' \
          mac scripts README.md LICENSE install.sh CLAUDE.md
        
        # Calculate SHA256
        cd dist
        shasum -a 256 "mac-power-tools-${VERSION}.tar.gz" > "mac-power-tools-${VERSION}.sha256"
        cd ..
        
        echo "Archive created: dist/mac-power-tools-${VERSION}.tar.gz"
        echo "SHA256: $(cat dist/mac-power-tools-${VERSION}.sha256)"
    
    - name: Create Git Tag
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag -a "$VERSION" -m "Auto-release $VERSION"
        git push origin "$VERSION"
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        name: Mac Power Tools ${{ steps.version.outputs.version }}
        tag_name: ${{ steps.version.outputs.version }}
        draft: false
        prerelease: false
        generate_release_notes: false
        files: |
          dist/mac-power-tools-*.tar.gz
          dist/mac-power-tools-*.sha256
        body_path: release_notes.md
    
    - name: Trigger Homebrew Formula Update
      env:
        GITHUB_TOKEN: ${{ secrets.HOMEBREW_TAP_TOKEN || secrets.GITHUB_TOKEN }}
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        
        echo "üç∫ Triggering Homebrew formula update..."
        
        # Wait for release to be fully available
        sleep 10
        
        # Trigger the homebrew-update workflow
        gh workflow run homebrew-update.yml \
          --repo mikejennings/mac-power-tools \
          --ref master \
          --field version="${VERSION}"
        
        if [ $? -eq 0 ]; then
          echo "‚úÖ Successfully triggered Homebrew formula update for ${VERSION}"
          echo ""
          echo "The formula will be updated automatically in ~30 seconds."
          echo "Users can then install with:"
          echo "  brew update && brew upgrade mac-power-tools"
        else
          echo "‚ö†Ô∏è Could not trigger automatic Homebrew update."
          echo "You may need to manually trigger the homebrew-update workflow."
          echo "Or ensure HOMEBREW_TAP_TOKEN secret is set with repo access."
        fi